{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2020-05-20T08:18:41.022Z",
    "end": "2020-05-20T08:18:49.114Z",
    "duration": 8092,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "f2bb7d7d-b777-4755-b972-a20a4d5810a3",
    "title": "",
    "fullFile": "cypress/integration/PUT/update_password.feature",
    "file": "cypress/integration/PUT/update_password.feature",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "9678c809-76db-48ad-b2e7-089066050e32",
        "title": "Update user password",
        "fullFile": "",
        "file": "",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Create user",
            "fullTitle": "Update user password Create user",
            "duration": 7822,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
            "err": {},
            "isRoot": false,
            "uuid": "13dd56db-da7f-46de-ad5a-262a99276394",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Update password",
            "fullTitle": "Update user password Update password",
            "duration": 70,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
            "err": {},
            "isRoot": false,
            "uuid": "26c42b9c-c59f-456e-a73f-dd79637b46e3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "User can not update password without auth",
            "fullTitle": "Update user password User can not update password without auth",
            "duration": 33,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
            "err": {},
            "isRoot": false,
            "uuid": "d7996a8b-9ea1-419b-b43e-664b896b23d1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "User can not update password to empty new password",
            "fullTitle": "Update user password User can not update password to empty new password",
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
            "err": {},
            "isRoot": false,
            "uuid": "e53cc3e8-4dd6-4eda-9ea1-daaf3ef32f84",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "New password and old password can not be the same",
            "fullTitle": "Update user password New password and old password can not be the same",
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
            "err": {},
            "isRoot": false,
            "uuid": "a3888535-922b-4aa7-82b3-3fec6e50f590",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "User can not update password with invalid old password",
            "fullTitle": "Update user password User can not update password with invalid old password",
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
            "err": {},
            "isRoot": false,
            "uuid": "b7d7b690-503c-4773-9eb6-94640c9e06c3",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "13dd56db-da7f-46de-ad5a-262a99276394",
          "26c42b9c-c59f-456e-a73f-dd79637b46e3",
          "d7996a8b-9ea1-419b-b43e-664b896b23d1",
          "e53cc3e8-4dd6-4eda-9ea1-daaf3ef32f84",
          "a3888535-922b-4aa7-82b3-3fec6e50f590",
          "b7d7b690-503c-4773-9eb6-94640c9e06c3"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 8017,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2020
}